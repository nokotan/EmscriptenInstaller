name: Automated Installer Build

on: [ push ]

jobs:
  build-installer:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Installer
        working-directory: src
        run: |
          mkdir Output
          iscc /O"Output" "./CodeDownloadFiles.iss"

      - name: Test Installer
        working-directory: src
        run: |
          Output/Emscripten.exe /SILENT /SUPPRESSMSGBOXES /LOG="InstallLog.Log"
          Wait-Process -Name Emscripten
          cat InstallLog.Log
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          echo $env:Path >> $Env:GITHUB_PATH

      - name: Validate Installation
        run: |
          emcc --version
          emcc Test/Main.cpp
 
      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: Emscripten-Installer
          path: src/Output/Emscripten.exe

  build-offline-installer:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Execute Downloader
        working-directory: src
        run: |
          mkdir zips
          mkdir tmp
          bash ./DownloadAssets.sh

      - name: Create Installer
        working-directory: src
        run: |
          mkdir Output
          iscc /O"Output" "./OfflineInstaller.iss"

      - name: Test Installer
        working-directory: src
        run: |
          Output/EmscriptenOffline.exe /SILENT /SUPPRESSMSGBOXES /LOG="InstallLog.Log"
          Wait-Process -Name EmscriptenOffline
          cat InstallLog.Log
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          echo $env:Path >> $Env:GITHUB_PATH

      - name: Validate Installation
        run: |
          emcc --version
          emcc Test/Main.cpp
 
      - name: Save Bundles
        uses: actions/upload-artifact@v2
        with:
          name: Emscripten-Offline-Installer
          path: src/Output/EmscriptenOffline.exe

  build-dockerimage:
    runs-on: windows-latest
    needs: [ build-offline-installer ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Restore Bundles (Offline)
        uses: actions/download-artifact@v2
        with:
          name: Emscripten-Offline-Installer
          path: .

      - name: Build Image (Latest)
        if: ${{ !contains(github.ref, 'tags/') }}
        run: |
          docker build . --file Dockerfile --tag nokotan/emscripten-windows:latest
          docker image push nokotan/emscripten-windows:latest

      - name: Build Image (Tagged)
        if: ${{ contains(github.ref, 'tags/') }}
        run: |
          docker build . --file Dockerfile --tag nokotan/emscripten-windows:${{ github.ref_name }}
          docker image push nokotan/emscripten-windows:${{ github.ref_name }}

  deploy:
    if: ${{ contains(github.ref, 'tags/') }}
    needs: [ build-installer, build-offline-installer ]
    runs-on: ubuntu-latest

    steps:
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: Emscripten-Installer
          path: .

      - name: Restore Bundles (Offline)
        uses: actions/download-artifact@v2
        with:
          name: Emscripten-Offline-Installer
          path: .

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Emscripten.exe
          asset_name: Emscripten.exe
          asset_content_type: application/octet

      - name: Upload Release Asset (Offline)
        id: upload-release-asset-offline
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: EmscriptenOffline.exe
          asset_name: EmscriptenOffline.exe
          asset_content_type: application/octet
